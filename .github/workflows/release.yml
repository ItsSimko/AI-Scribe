name: Build Workflow

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*.alpha"
      - "v*.*.*-RC*"

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Create Version Text File for PyInstaller
        run: |
          $tag = '${{ github.ref }}' -replace 'refs/tags/', ''
          if ($tag -eq 'dev') {
            $date = (Get-Date -Format "yyyyMMdd")
            $tag = "$tag-nightly-$date"
          }
          echo $tag > .\scripts\__version__
        shell: pwsh

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          architecture: "x64"
          cache: "pip"
          cache-dependency-path: "**/client_requirements.txt"

      # Create CUDA-enabled executable
      - name: Install CUDA-enabled llama_cpp
        run: |
          pip install --index-url https://abetlen.github.io/llama-cpp-python/whl/cu124 --extra-index-url https://pypi.org/simple llama-cpp-python==v0.3.8

      - name: Instal CUDA drivers for NVIDIA install
        run: |
          pip install nvidia-cudnn-cu12==9.5.0.50
          pip install nvidia-cuda-runtime-cu12==12.4.127
          pip install nvidia-cuda-nvrtc-cu12==12.4.127
          pip install nvidia-cublas-cu12==12.4.5.8

      - name: Install requirements
        run: |
          pip install -r client_requirements.txt

      - name: Run PyInstaller for NVIDIA
        run: |
          pyinstaller --runtime-hook=.\scripts\runtime_hooks\hook-runtime.py --additional-hooks-dir=.\scripts\hooks --hidden-import=en_core_web_md --hidden-import=en_core_sci_md --add-data ".\scripts\NVIDIA_INSTALL.txt:install_state" --add-data ".\src\FreeScribe.client\whisper-assets:faster_whisper\assets" --add-data ".\src\FreeScribe.client\markdown:markdown" --add-data ".\src\FreeScribe.client\assets:assets" --add-data "C:\hostedtoolcache\windows\Python\3.10.11\x64\lib\site-packages\nvidia:nvidia-drivers" --name freescribe-client-nvidia --icon=.\src\FreeScribe.client\assets\logo.ico --noconsole .\src\FreeScribe.client\client.py

      # Create CPU-only executable
      - name: Uninstall CUDA-enabled llama_cpp (if necessary) and install CPU-only llama_cpp
        run: |
          pip uninstall nvidia-cudnn-cu12==9.5.0.50
          pip uninstall nvidia-cuda-runtime-cu12==12.4.127
          pip uninstall nvidia-cuda-nvrtc-cu12==12.4.127
          pip uninstall nvidia-cublas-cu12==12.4.5.8
          pip uninstall -y llama-cpp-python
          pip install --index-url https://abetlen.github.io/llama-cpp-python/whl/cpu --extra-index-url https://pypi.org/simple llama-cpp-python==v0.3.8

      - name: Run PyInstaller for CPU-only
        run: |
          pyinstaller --runtime-hook=.\scripts\runtime_hooks\hook-runtime.py --additional-hooks-dir=.\scripts\hooks --hidden-import=en_core_web_md --hidden-import=en_core_sci_md --add-data ".\scripts\CPU_INSTALL.txt:install_state" --add-data ".\src\FreeScribe.client\whisper-assets:faster_whisper\assets" --add-data ".\src\FreeScribe.client\markdown:markdown" --add-data ".\src\FreeScribe.client\assets:assets" --name freescribe-client-cpu --icon=.\src\FreeScribe.client\assets\logo.ico --noconsole .\src\FreeScribe.client\client.py

      - name: Set up NSIS
        uses: joncloud/makensis-action@1c9f4bf2ea0c771147db31a2f3a7f5d8705c0105
        with:
          script-file: .\scripts\install.nsi
          additional-plugin-paths: "./scripts/nsis-plugins"

      - name: Rename Installer
        run: |
          mv dist/FreeScribeInstaller.exe dist/FreeScribeInstaller_windows.exe
      
      - name: Upload Windows Installer
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: dist/FreeScribeInstaller_windows.exe
          draft: true
          prerelease: ${{ github.ref_name }} =~ '.*alpha.*' || ${{ github.ref_name }} =~ '.*-RC.*'

  
  build-macos-intel:
    runs-on: macos-13
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: "**/client_requirements_mac.txt"

      - name: Install PortAudio
        run: |
          brew install portaudio

      - name: Install requirements
        run: |
          pip install -r client_requirements_mac.txt
      
      - name: Install ffmpeg
        run: |
          brew install ffmpeg

      - name: Build macOS app
        run: |
          ./build-mac.sh
      
      - name: Build PKG installer
        run: |
          ./build-pkg.sh --arch x86_64

      - name: Upload macOS Intel Installer
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: dist/FreeScribeInstaller_x86_64.pkg
          draft: true
          prerelease: ${{ github.ref_name }} =~ '.*alpha.*' || ${{ github.ref_name }} =~ '.*-RC.*'
  
  build-macos-arm:
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: "**/client_requirements_mac.txt"

      - name: Install PortAudio
        run: |
          brew install portaudio

      - name: Install requirements
        run: |
          pip install -r client_requirements_mac.txt

      - name: Install ffmpeg
        run: |
          brew install ffmpeg

      - name: Build macOS app
        run: |
          ./build-mac.sh
      
      - name: Build PKG installer
        run: |
          ./build-pkg.sh --arch arm64
      
      - name: Upload macOS ARM Installer
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: dist/FreeScribeInstaller_arm64.pkg
          draft: true
          prerelease: ${{ github.ref_name }} =~ '.*alpha.*' || ${{ github.ref_name }} =~ '.*-RC.*'

  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: "**/flatpak/requirements_cpu.txt"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg flatpak flatpak-builder

      

      - name: Build Flatpak
        run: |
          chmod +x ./flatpak/build-flatpak.sh
          ./flatpak/build-flatpak.sh

      - name: Rename Executable
        run: |
          mv dist/FreeScribe/FreeScribe dist/FreeScribeInstaller_linux

      - name: Upload Flatpak Bundle
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          files: flatpak/freescribe.flatpak
          draft: true
          prerelease: ${{ github.ref_name }} =~ '.*alpha.*' || ${{ github.ref_name }} =~ '.*-RC.*'
          
  finalize-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos-intel, build-macos-arm, build-linux]
    steps:
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false